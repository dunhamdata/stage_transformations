/*===========================================================================================================================================
 Procedure:   bc opportunity transformation
 Create date: 2022-06-22
 Description:  Converts RAW export data names to standardized contact schema
 Affected table(s):
 Parameter(s): [Dunham].[bc_sf].[opportunity],[Dunham].[bc_sf].[campaign], [Dunham].[bc_sf].[account], [Dunham].[bc_sf].[npe_01_opp_payment_c]
 Return Value(s): [Dunham].[bc].[opportunity_stage]
 Programming Notes:

      **Only records with an ID will be processed

      X    [cs_opportunity_id] = Dunham.bc_sf.opportunity.id
      X    ,[account_id] = Dunham.bc_sf.opportunity.account_id
      X    ,[cs_account_id]
      X    ,[static_id] = select [static_id] from Dunham.bc.contact where Dunham.bc_sf.opportunity.contact_id = Dunham.bc_sf.contact.[unique_id_c] = Dunham.bc.contact.advid
      X    ,[opportunity_id]
      X    ,[opportunity_name] = Dunham.bc_sf.opportunity.name
      X    ,[created_date] = Dunham.bc_sf.opportunity.created_date
      X    ,[close_date] = Dunham.bc_sf.opportunity.close_date
      X    ,[stage] = Dunham.bc_sf.opportunity.stage_name
      X    ,[status]
      X    ,[amount] = Dunham.bc_sf.opportunity.amount
      X    ,[no_of_expected_payments_installments_] = Dunham.bc_sf.opportunity.[no_of_expected_payments_installments_c]
      X    ,[installment_start_date] = Dunham.bc_sf.opportunity.installment_start_date_c
      X    ,[installment_period] = Dunham.bc_sf.opportunity.installment_period_c
      X    ,[number_of_payments] = count(distinct id) from Dunham.bc_sf.npe_01_opp_payment_c where [npe_01_opportunity_c] = Dunham.bc_sf.opportunity.id
      X    ,[payment_amount_received] = sum([npe_01_payment_amount_c]) from Dunham.bc_sf.npe_01_opp_payment_c where [npe_01_opportunity_c] = Dunham.bc_sf.opportunity.id
      X    ,[primary_campaign_source] = select name from Dunahm.[bc_sf].[campaign] where [Dunham].[bc_sf].[opportunity].[campaign_id] = Dunahm.[bc_sf].[campaign].[id]
          ,[_fivetran_synced]





 =============================================================================================================================================
 SUMMARY OF CHANGES
 Date (yyyy-mm-dd)		Author				Comments
 ---------------------------------------------------------------------------------------------------------------------------------------------

 ==============================================================================================================================================*/

/*if staging table doesn't exist, create it*/

 IF OBJECT_ID('Dunham.bc.opportunity_stage') IS NULL

  CREATE TABLE [Dunham].[bc].[opportunity_stage](
  [pk_opp_id] varchar(200) NOT NULL PRIMARY KEY,
  [fk_constituent_id] varchar(200) NULL,
  [opp_name] [varchar](max) NULL,
 	[created_date] [datetime2] NOT NULL,
  [installment_start_date] datetime2 NULL,
 	[close_date] datetime2 NULL,
 	[amount_committed] [float] NOT NULL,
 	[amount_received] [float] NULL,
 	[no_payments_received] int NULL,
 	[installment_count] int NULL,
 	[installment_period] [varchar](max) NULL,
 	[campaign] [varchar](max) NULL,
 	[opp_owner] [varchar](max) NULL,
 	[stage] [varchar](max) NULL,
  [last_modified_date] datetime2 NULL
     ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];

 MERGE [Dunham].[bc].[opportunity_stage] WITH (HOLDLOCK) as target
 USING(
     SELECT DISTINCT

            CAST([id] as varchar(200)) AS [pk_opp_id],

            CAST([static_id] as varchar(200)) AS [fk_constituent_id],

            CASE
              WHEN LEN([name])<=0
                OR [name] IS NULL
              THEN NULL
              ELSE CAST([name] as varchar(max))
            END AS [opp_name],

            CASE
              WHEN LEN([created_date])<=0
                OR [created_date] IS NULL
              THEN CAST('1901-01-01 13:14:15.0000000' as datetime2)
              ELSE CAST([created_date] as datetime2)
            END AS [created_date],

            CASE
              WHEN LEN([installment_start_date_c])<=0
                OR [installment_start_date_c] IS NULL
              THEN CAST('1901-01-01 13:14:15.0000000' as datetime2)
              ELSE CAST([installment_start_date_c] as datetime2)
            END AS [installment_start_date],

            CASE
              WHEN LEN([close_date])<=0
                OR [close_date] IS NULL
              THEN CAST('1901-01-01 13:14:15.0000000' as datetime2)
              ELSE CAST([close_date] as datetime2)
            END AS [close_date],

            CASE
              WHEN LEN([amount])<=0
                OR [amount] IS NULL
              THEN 0
              ELSE CAST([amount] as float)
            END AS [amount_committed],

            CASE
              WHEN LEN([amount_received])<=0
                OR [amount_received] IS NULL
              THEN 0
              ELSE CAST([amount_received] as float)
            END AS [amount_received],

            CASE
              WHEN LEN([payments_received])<=0
                OR [payments_received] IS NULL
              THEN NULL
              ELSE CAST([payments_received] as int)
            END AS [no_payments_received],

            CASE
              WHEN (LEN([installment_period_c])<=0
                      OR [installment_period_c] IS NULL
                      OR [installment_period_c] = '')
                AND ([stage_name] = 'Closed Won'
                      OR [stage_name] = 'Closed Lost')
              THEN 'One-Time'
              WHEN [installment_period_c] is null
                AND [stage_name]='Funding'
              THEN 'Yearly'
              ELSE CAST([installment_period_c] as varchar(max))
            END AS [installment_period],


        /*calculating installment counts based on created and close dates*/

          CASE
          		WHEN [stage_name] <> 'Funding'
                OR [stage_name] <> 'Closed Lost'
                OR [stage_name] <> 'Closed Won'
                OR [stage_name] <> 'Written Commitment'
                OR [stage_name] <> 'Verbal Commitment'
                OR [stage_name] <> 'Proposal Sent'
              THEN NULL

          		WHEN ([stage_name] = 'Closed Won'
                  OR [stage_name] = 'Closed Lost')
                AND [no_of_expected_payments_installments_c] is null
              THEN 1

          	/*creates estimated number of installments based on [created_date] and indexed end date based on installment frequencies is blank and start date exists*/

          		/*assumes yearly installment cadence if not listed and determines years between start and end date*/
          		 WHEN [stage_name] = 'Funding'
                AND [no_of_expected_payments_installments_c] is null
                AND [installment_period_c] is null
                AND [installment_start_date_c] is not null
          		 THEN ABS(DATEDIFF(year, [close_date], [installment_start_date_c]))

          		/*determines months between start and end date when on monthly schedule*/
          		WHEN [stage_name]='Funding'
                AND [no_of_expected_payments_installments_c] is null
                AND [installment_period_c]='Monthly'
                AND [installment_start_date_c] is not null
          		THEN ABS(DATEDIFF(month, [close_date], [installment_start_date_c]))

          		/*determines years between start and end date when on yearly schedule*/
          		WHEN [stage_name]='Funding'
                AND [no_of_expected_payments_installments_c] is null
                AND [installment_period_c]='Yearly'
                AND [installment_start_date_c] is not null
          		THEN ABS(DATEDIFF(year, [close_date], [installment_start_date_c]))

          	   /*determines quarters between start and end date when on quarterly schedule*/
          	    WHEN [stage_name]='Funding'
                  AND [no_of_expected_payments_installments_c] is null
                  AND [installment_period_c]='Quarterly'
                  AND [installment_start_date_c] is not null
          			THEN ABS(DATEDIFF(quarter, [close_date], [installment_start_date_c]))

          	   /*determines weeks between start and end date when on weekly schedule*/
          	    WHEN [stage_name]='Funding'
                  AND [no_of_expected_payments_installments_c] is null
                  AND [installment_period_c]='Weekly'
                  AND [installment_start_date_c] is not null
          			THEN ABS(DATEDIFF(week, [close_date], [installment_start_date_c]))


          	/*creates estimated number of installments based on [created_date] and indexed end date based on installment frequencies and start date is blank*/

          		/*assumes yearly installment cadence if not listed and determines years between start and end date*/
          		 WHEN [stage_name] = 'Funding'
                AND [no_of_expected_payments_installments_c] is null
                AND [installment_period_c] is null
                AND [installment_start_date_c] is null
          		 THEN ABS(DATEDIFF(year, [close_date], [created_date]))

          		/*determines months between start and end date when on monthly schedule*/
          		WHEN [stage_name]='Funding'
                AND [no_of_expected_payments_installments_c] is null
                AND [installment_period_c]='Monthly'
                AND [installment_start_date_c] is null
          		THEN ABS(DATEDIFF(month, [close_date], [created_date]))

          		/*determines years between start and end date when on yearly schedule*/
          		WHEN [stage_name]='Funding'
                AND [no_of_expected_payments_installments_c] is null
                AND [installment_period_c]='Yearly'
                AND [installment_start_date_c] is null
          		THEN ABS(DATEDIFF(year, [close_date], [created_date]))

          	   /*determines quarters between start and end date when on quarterly schedule*/
          	    WHEN [stage_name]='Funding'
                  AND [no_of_expected_payments_installments_c] is null
                  AND [installment_period_c]='Quarterly'
                  AND [installment_start_date_c] is null
          			THEN ABS(DATEDIFF(quarter, [close_date], [created_date]))

          	   /*determines weeks between start and end date when on weekly schedule*/
          	    WHEN [stage_name]='Funding'
                  AND [no_of_expected_payments_installments_c] is null
                  AND [installment_period_c]='Weekly'
                  AND [installment_start_date_c] is null
          			THEN ABS(DATEDIFF(week, [close_date], [created_date]))

          		ELSE ABS(CAST([no_of_expected_payments_installments_c] as int)) END AS [installment_count],

            CASE
              WHEN LEN([campaign_name])<=0
                OR [campaign_name] IS NULL
              THEN NULL
              ELSE CAST([campaign_name] as varchar(max))
            END AS [campaign],

            CASE
              WHEN LEN([owner])<=0
                OR [owner] IS NULL
              THEN NULL
              ELSE CAST([owner] as varchar(max))
            END AS [opp_owner],

            CASE
              WHEN LEN([stage_name])<=0
                OR [stage_name] IS NULL
              THEN NULL
              ELSE CAST([stage_name] as varchar(max))
            END AS [stage]



            FROM [Dunham].[bc_sf].[opportunity] o


            /*calculating received payment counts and amounts*/

            LEFT JOIN (
                  select distinct [npe_01_opportunity_c],
                     count(id) as [payments_received],
                         sum(npe_01_payment_amount_c) as [amount_received]
                  from [Dunham].[bc_sf].[npe_01_opp_payment_c]
                group by [npe_01_opportunity_c]

            ) p on p.[npe_01_opportunity_c] = o.[id]


            /*adding campaign name to opportunity table*/

            LEFT JOIN (
                select id as [campaign_id],
                       name as [campaign_name]
                from Dunham.bc_sf.campaign
            ) c on c.campaign_id = o.[campaign_id]


            /*adding opportunity owner to opportunity table*/
            LEFT JOIN (
              select id as [owner_id],
                     name as [owner]
              from Dunham.bc_sf.[user]
            ) u on u.owner_id = o.[owner_id]



            /*adding arena_static_id_c field for pairing to .gift and .contact*/
            LEFT JOIN (
              SELECT DISTINCT [static_arena_id_c] as [static_id],
                     [id] as [sf_account_id]
              FROM Dunham.bc_sf.account
            ) sfc on sfc.[sf_account_id] = o.[account_id]

            WHERE [id] is not null and is_deleted = 0
  ) as source

  ON (target.[pk_opp_id] = source.[pk_opp_id] collate SQL_Latin1_General_CP1_CI_AS)

  /*inserts .opportunity rows that are not found in .opportunity_stage rows*/
  WHEN NOT MATCHED BY target
    THEN INSERT ([fk_constituent_id], [pk_opp_id], [opp_name], [created_date], [installment_start_date], [close_date], [amount_committed], [amount_received],
                 [no_payments_received], [installment_count], [installment_period], [campaign], [opp_owner], [stage], [last_modified_date])

         VALUES (source.[fk_constituent_id], source.[pk_opp_id], source.[opp_name], source.[created_date], source.[installment_start_date], source.[close_date],
                source.[amount_committed], source.[amount_received], source.[no_payments_received], source.[installment_count], source.[installment_period],
                source.[campaign], source.[opp_owner], source.[stage], NULL)


  /*removes rows from .opportunity_stage that do not match .opportunity*/
  WHEN NOT MATCHED BY source
  THEN DELETE


  /*updates .gift_stage rows with matching .opportunity_stage.pk_opp_id with .opportunity data*/
  WHEN MATCHED THEN UPDATE SET
                    target.[fk_constituent_id] = source.[fk_constituent_id],
                   	target.[pk_opp_id] = source.[pk_opp_id],
                    target.[opp_name] = source.[opp_name],
                   	target.[created_date] = source.[created_date],
                    target.[installment_start_date] = source.[installment_start_date],
                   	target.[close_date] = source.[close_date],
                   	target.[amount_committed] = source.[amount_committed],
                   	target.[amount_received] = source.[amount_received],
                   	target.[no_payments_received] = source.[no_payments_received],
                   	target.[installment_count] = source.[installment_count],
                   	target.[installment_period] = source.[installment_period],
                   	target.[campaign] = source.[campaign],
                   	target.[opp_owner] = source.[opp_owner],
                   	target.[stage] = source.[stage],
                    target.[last_modified_date] = GETDATE();
